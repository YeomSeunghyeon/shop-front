{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nObject.defineProperty(exports, \"unstable_rethrow\", {\n  enumerable: true,\n  get: function () {\n    return unstable_rethrow;\n  }\n});\nconst _isdynamicusageerror = require(\"../../export/helpers/is-dynamic-usage-error\");\nconst _ispostpone = require(\"../../server/lib/router-utils/is-postpone\");\nconst _bailouttocsr = require(\"../../shared/lib/lazy-dynamic/bailout-to-csr\");\nconst _isnextroutererror = require(\"./is-next-router-error\");\nfunction unstable_rethrow(error) {\n  if ((0, _isnextroutererror.isNextRouterError)(error) || (0, _bailouttocsr.isBailoutToCSRError)(error) || (0, _isdynamicusageerror.isDynamicUsageError)(error) || (0, _ispostpone.isPostpone)(error)) {\n    throw error;\n  }\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause);\n  }\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["unstable_rethrow","error","_isnextroutererror","isNextRouterError","_bailouttocsr","isBailoutToCSRError","_isdynamicusageerror","isDynamicUsageError","_ispostpone","isPostpone","Error","cause"],"sources":["C:\\Users\\100li\\node_modules\\next\\src\\client\\components\\unstable-rethrow.ts"],"sourcesContent":["import { isDynamicUsageError } from '../../export/helpers/is-dynamic-usage-error'\nimport { isPostpone } from '../../server/lib/router-utils/is-postpone'\nimport { isBailoutToCSRError } from '../../shared/lib/lazy-dynamic/bailout-to-csr'\nimport { isNextRouterError } from './is-next-router-error'\n\n/**\n * This function should be used to rethrow internal Next.js errors so that they can be handled by the framework.\n * When wrapping an API that uses errors to interrupt control flow, you should use this function before you do any error handling.\n * This function will rethrow the error if it is a Next.js error so it can be handled, otherwise it will do nothing.\n *\n * Read more: [Next.js Docs: `unstable_rethrow`](https://nextjs.org/docs/app/api-reference/functions/unstable_rethrow)\n */\nexport function unstable_rethrow(error: unknown): void {\n  if (\n    isNextRouterError(error) ||\n    isBailoutToCSRError(error) ||\n    isDynamicUsageError(error) ||\n    isPostpone(error)\n  ) {\n    throw error\n  }\n\n  if (error instanceof Error && 'cause' in error) {\n    unstable_rethrow(error.cause)\n  }\n}\n"],"mappings":";;;;;+BAYgB;;;WAAAA,gBAAA;;;qCAZoB;4BACT;8BACS;mCACF;AAS3B,SAASA,iBAAiBC,KAAc;EAC7C,IACE,IAAAC,kBAAA,CAAAC,iBAAiB,EAACF,KAAA,KAClB,IAAAG,aAAA,CAAAC,mBAAmB,EAACJ,KAAA,KACpB,IAAAK,oBAAA,CAAAC,mBAAmB,EAACN,KAAA,KACpB,IAAAO,WAAA,CAAAC,UAAU,EAACR,KAAA,GACX;IACA,MAAMA,KAAA;EACR;EAEA,IAAIA,KAAA,YAAiBS,KAAA,IAAS,WAAWT,KAAA,EAAO;IAC9CD,gBAAA,CAAiBC,KAAA,CAAMU,KAAK;EAC9B;AACF","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}