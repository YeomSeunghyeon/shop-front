{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  ReadonlyURLSearchParams: null,\n  RedirectType: null,\n  ServerInsertedHTMLContext: null,\n  notFound: null,\n  permanentRedirect: null,\n  redirect: null,\n  unstable_rethrow: null,\n  useParams: null,\n  usePathname: null,\n  useRouter: null,\n  useSearchParams: null,\n  useSelectedLayoutSegment: null,\n  useSelectedLayoutSegments: null,\n  useServerInsertedHTML: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  ReadonlyURLSearchParams: function () {\n    return _navigationreactserver.ReadonlyURLSearchParams;\n  },\n  RedirectType: function () {\n    return _navigationreactserver.RedirectType;\n  },\n  ServerInsertedHTMLContext: function () {\n    return _serverinsertedhtmlsharedruntime.ServerInsertedHTMLContext;\n  },\n  notFound: function () {\n    return _navigationreactserver.notFound;\n  },\n  permanentRedirect: function () {\n    return _navigationreactserver.permanentRedirect;\n  },\n  redirect: function () {\n    return _navigationreactserver.redirect;\n  },\n  unstable_rethrow: function () {\n    return _navigationreactserver.unstable_rethrow;\n  },\n  useParams: function () {\n    return useParams;\n  },\n  usePathname: function () {\n    return usePathname;\n  },\n  useRouter: function () {\n    return useRouter;\n  },\n  useSearchParams: function () {\n    return useSearchParams;\n  },\n  useSelectedLayoutSegment: function () {\n    return useSelectedLayoutSegment;\n  },\n  useSelectedLayoutSegments: function () {\n    return useSelectedLayoutSegments;\n  },\n  useServerInsertedHTML: function () {\n    return _serverinsertedhtmlsharedruntime.useServerInsertedHTML;\n  }\n});\nconst _react = require(\"react\");\nconst _approutercontextsharedruntime = require(\"../../shared/lib/app-router-context.shared-runtime\");\nconst _hooksclientcontextsharedruntime = require(\"../../shared/lib/hooks-client-context.shared-runtime\");\nconst _getsegmentvalue = require(\"./router-reducer/reducers/get-segment-value\");\nconst _segment = require(\"../../shared/lib/segment\");\nconst _navigationreactserver = require(\"./navigation.react-server\");\nconst _dynamicrendering = require(\"../../server/app-render/dynamic-rendering\");\nconst _serverinsertedhtmlsharedruntime = require(\"../../shared/lib/server-inserted-html.shared-runtime\");\nfunction useSearchParams() {\n  const searchParams = (0, _react.useContext)(_hooksclientcontextsharedruntime.SearchParamsContext);\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = (0, _react.useMemo)(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null;\n    }\n    return new _navigationreactserver.ReadonlyURLSearchParams(searchParams);\n  }, [searchParams]);\n  if (typeof window === 'undefined') {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const {\n      bailoutToClientRendering\n    } = require('./bailout-to-client-rendering');\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering('useSearchParams()');\n  }\n  return readonlySearchParams;\n}\nfunction usePathname() {\n  (0, _dynamicrendering.useDynamicRouteParams)('usePathname()');\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return (0, _react.useContext)(_hooksclientcontextsharedruntime.PathnameContext);\n}\nfunction useRouter() {\n  const router = (0, _react.useContext)(_approutercontextsharedruntime.AppRouterContext);\n  if (router === null) {\n    throw new Error('invariant expected app router to be mounted');\n  }\n  return router;\n}\nfunction useParams() {\n  (0, _dynamicrendering.useDynamicRouteParams)('useParams()');\n  return (0, _react.useContext)(_hooksclientcontextsharedruntime.PathParamsContext);\n}\n/** Get the canonical parameters from the current level to the leaf node. */ // Client components API\nfunction getSelectedLayoutSegmentPath(tree, parallelRouteKey, first, segmentPath) {\n  if (first === void 0) first = true;\n  if (segmentPath === void 0) segmentPath = [];\n  let node;\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey];\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1];\n    var _parallelRoutes_children;\n    node = (_parallelRoutes_children = parallelRoutes.children) != null ? _parallelRoutes_children : Object.values(parallelRoutes)[0];\n  }\n  if (!node) return segmentPath;\n  const segment = node[0];\n  let segmentValue = (0, _getsegmentvalue.getSegmentValue)(segment);\n  if (!segmentValue || segmentValue.startsWith(_segment.PAGE_SEGMENT_KEY)) {\n    return segmentPath;\n  }\n  segmentPath.push(segmentValue);\n  return getSelectedLayoutSegmentPath(node, parallelRouteKey, false, segmentPath);\n}\nfunction useSelectedLayoutSegments(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = 'children';\n  (0, _dynamicrendering.useDynamicRouteParams)('useSelectedLayoutSegments()');\n  const context = (0, _react.useContext)(_approutercontextsharedruntime.LayoutRouterContext);\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null;\n  return getSelectedLayoutSegmentPath(context.tree, parallelRouteKey);\n}\nfunction useSelectedLayoutSegment(parallelRouteKey) {\n  if (parallelRouteKey === void 0) parallelRouteKey = 'children';\n  (0, _dynamicrendering.useDynamicRouteParams)('useSelectedLayoutSegment()');\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey);\n  if (!selectedLayoutSegments || selectedLayoutSegments.length === 0) {\n    return null;\n  }\n  const selectedLayoutSegment = parallelRouteKey === 'children' ? selectedLayoutSegments[0] : selectedLayoutSegments[selectedLayoutSegments.length - 1];\n  // if the default slot is showing, we return null since it's not technically \"selected\" (it's a fallback)\n  // and returning an internal value like `__DEFAULT__` would be confusing.\n  return selectedLayoutSegment === _segment.DEFAULT_SEGMENT_KEY ? null : selectedLayoutSegment;\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["ReadonlyURLSearchParams","_navigationreactserver","RedirectType","ServerInsertedHTMLContext","_serverinsertedhtmlsharedruntime","notFound","permanentRedirect","redirect","unstable_rethrow","useParams","usePathname","useRouter","useSearchParams","useSelectedLayoutSegment","useSelectedLayoutSegments","useServerInsertedHTML","searchParams","_react","useContext","_hooksclientcontextsharedruntime","SearchParamsContext","readonlySearchParams","useMemo","window","bailoutToClientRendering","require","_dynamicrendering","useDynamicRouteParams","PathnameContext","router","_approutercontextsharedruntime","AppRouterContext","Error","PathParamsContext","getSelectedLayoutSegmentPath","tree","parallelRouteKey","first","segmentPath","node","parallelRoutes","_parallelRoutes_children","children","Object","values","segment","segmentValue","_getsegmentvalue","getSegmentValue","startsWith","_segment","PAGE_SEGMENT_KEY","push","context","LayoutRouterContext","selectedLayoutSegments","length","selectedLayoutSegment","DEFAULT_SEGMENT_KEY"],"sources":["C:\\Users\\100li\\node_modules\\next\\src\\client\\components\\navigation.ts"],"sourcesContent":["import type { FlightRouterState } from '../../server/app-render/types'\nimport type { Params } from '../../server/request/params'\n\nimport { useContext, useMemo } from 'react'\nimport {\n  AppRouterContext,\n  LayoutRouterContext,\n  type AppRouterInstance,\n} from '../../shared/lib/app-router-context.shared-runtime'\nimport {\n  SearchParamsContext,\n  PathnameContext,\n  PathParamsContext,\n} from '../../shared/lib/hooks-client-context.shared-runtime'\nimport { getSegmentValue } from './router-reducer/reducers/get-segment-value'\nimport { PAGE_SEGMENT_KEY, DEFAULT_SEGMENT_KEY } from '../../shared/lib/segment'\nimport { ReadonlyURLSearchParams } from './navigation.react-server'\nimport { useDynamicRouteParams } from '../../server/app-render/dynamic-rendering'\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you *read* the current URL's search parameters.\n *\n * Learn more about [`URLSearchParams` on MDN](https://developer.mozilla.org/docs/Web/API/URLSearchParams)\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useSearchParams } from 'next/navigation'\n *\n * export default function Page() {\n *   const searchParams = useSearchParams()\n *   searchParams.get('foo') // returns 'bar' when ?foo=bar\n *   // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSearchParams`](https://nextjs.org/docs/app/api-reference/functions/use-search-params)\n */\n// Client components API\nexport function useSearchParams(): ReadonlyURLSearchParams {\n  const searchParams = useContext(SearchParamsContext)\n\n  // In the case where this is `null`, the compat types added in\n  // `next-env.d.ts` will add a new overload that changes the return type to\n  // include `null`.\n  const readonlySearchParams = useMemo(() => {\n    if (!searchParams) {\n      // When the router is not ready in pages, we won't have the search params\n      // available.\n      return null\n    }\n\n    return new ReadonlyURLSearchParams(searchParams)\n  }, [searchParams]) as ReadonlyURLSearchParams\n\n  if (typeof window === 'undefined') {\n    // AsyncLocalStorage should not be included in the client bundle.\n    const { bailoutToClientRendering } =\n      require('./bailout-to-client-rendering') as typeof import('./bailout-to-client-rendering')\n    // TODO-APP: handle dynamic = 'force-static' here and on the client\n    bailoutToClientRendering('useSearchParams()')\n  }\n\n  return readonlySearchParams\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the current URL's pathname.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { usePathname } from 'next/navigation'\n *\n * export default function Page() {\n *  const pathname = usePathname() // returns \"/dashboard\" on /dashboard?foo=bar\n *  // ...\n * }\n * ```\n *\n * Read more: [Next.js Docs: `usePathname`](https://nextjs.org/docs/app/api-reference/functions/use-pathname)\n */\n// Client components API\nexport function usePathname(): string {\n  useDynamicRouteParams('usePathname()')\n\n  // In the case where this is `null`, the compat types added in `next-env.d.ts`\n  // will add a new overload that changes the return type to include `null`.\n  return useContext(PathnameContext) as string\n}\n\n// Client components API\nexport {\n  ServerInsertedHTMLContext,\n  useServerInsertedHTML,\n} from '../../shared/lib/server-inserted-html.shared-runtime'\n\n/**\n *\n * This hook allows you to programmatically change routes inside [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components).\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useRouter } from 'next/navigation'\n *\n * export default function Page() {\n *  const router = useRouter()\n *  // ...\n *  router.push('/dashboard') // Navigate to /dashboard\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useRouter`](https://nextjs.org/docs/app/api-reference/functions/use-router)\n */\n// Client components API\nexport function useRouter(): AppRouterInstance {\n  const router = useContext(AppRouterContext)\n  if (router === null) {\n    throw new Error('invariant expected app router to be mounted')\n  }\n\n  return router\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read a route's dynamic params filled in by the current URL.\n *\n * @example\n * ```ts\n * \"use client\"\n * import { useParams } from 'next/navigation'\n *\n * export default function Page() {\n *   // on /dashboard/[team] where pathname is /dashboard/nextjs\n *   const { team } = useParams() // team === \"nextjs\"\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useParams`](https://nextjs.org/docs/app/api-reference/functions/use-params)\n */\n// Client components API\nexport function useParams<T extends Params = Params>(): T {\n  useDynamicRouteParams('useParams()')\n\n  return useContext(PathParamsContext) as T\n}\n\n/** Get the canonical parameters from the current level to the leaf node. */\n// Client components API\nfunction getSelectedLayoutSegmentPath(\n  tree: FlightRouterState,\n  parallelRouteKey: string,\n  first = true,\n  segmentPath: string[] = []\n): string[] {\n  let node: FlightRouterState\n  if (first) {\n    // Use the provided parallel route key on the first parallel route\n    node = tree[1][parallelRouteKey]\n  } else {\n    // After first parallel route prefer children, if there's no children pick the first parallel route.\n    const parallelRoutes = tree[1]\n    node = parallelRoutes.children ?? Object.values(parallelRoutes)[0]\n  }\n\n  if (!node) return segmentPath\n  const segment = node[0]\n\n  let segmentValue = getSegmentValue(segment)\n\n  if (!segmentValue || segmentValue.startsWith(PAGE_SEGMENT_KEY)) {\n    return segmentPath\n  }\n\n  segmentPath.push(segmentValue)\n\n  return getSelectedLayoutSegmentPath(\n    node,\n    parallelRouteKey,\n    false,\n    segmentPath\n  )\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segments **below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n *\n * import { useSelectedLayoutSegments } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segments = useSelectedLayoutSegments()\n *\n *   return (\n *     <ul>\n *       {segments.map((segment, index) => (\n *         <li key={index}>{segment}</li>\n *       ))}\n *     </ul>\n *   )\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegments`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segments)\n */\n// Client components API\nexport function useSelectedLayoutSegments(\n  parallelRouteKey: string = 'children'\n): string[] {\n  useDynamicRouteParams('useSelectedLayoutSegments()')\n\n  const context = useContext(LayoutRouterContext)\n  // @ts-expect-error This only happens in `pages`. Type is overwritten in navigation.d.ts\n  if (!context) return null\n\n  return getSelectedLayoutSegmentPath(context.tree, parallelRouteKey)\n}\n\n/**\n * A [Client Component](https://nextjs.org/docs/app/building-your-application/rendering/client-components) hook\n * that lets you read the active route segment **one level below** the Layout it is called from.\n *\n * @example\n * ```ts\n * 'use client'\n * import { useSelectedLayoutSegment } from 'next/navigation'\n *\n * export default function ExampleClientComponent() {\n *   const segment = useSelectedLayoutSegment()\n *\n *   return <p>Active segment: {segment}</p>\n * }\n * ```\n *\n * Read more: [Next.js Docs: `useSelectedLayoutSegment`](https://nextjs.org/docs/app/api-reference/functions/use-selected-layout-segment)\n */\n// Client components API\nexport function useSelectedLayoutSegment(\n  parallelRouteKey: string = 'children'\n): string | null {\n  useDynamicRouteParams('useSelectedLayoutSegment()')\n\n  const selectedLayoutSegments = useSelectedLayoutSegments(parallelRouteKey)\n\n  if (!selectedLayoutSegments || selectedLayoutSegments.length === 0) {\n    return null\n  }\n\n  const selectedLayoutSegment =\n    parallelRouteKey === 'children'\n      ? selectedLayoutSegments[0]\n      : selectedLayoutSegments[selectedLayoutSegments.length - 1]\n\n  // if the default slot is showing, we return null since it's not technically \"selected\" (it's a fallback)\n  // and returning an internal value like `__DEFAULT__` would be confusing.\n  return selectedLayoutSegment === DEFAULT_SEGMENT_KEY\n    ? null\n    : selectedLayoutSegment\n}\n\n// Shared components APIs\nexport {\n  notFound,\n  redirect,\n  permanentRedirect,\n  RedirectType,\n  ReadonlyURLSearchParams,\n  unstable_rethrow,\n} from './navigation.react-server'\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}