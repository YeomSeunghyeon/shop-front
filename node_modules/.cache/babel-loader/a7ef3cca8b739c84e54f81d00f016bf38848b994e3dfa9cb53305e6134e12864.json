{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n0 && (module.exports = {\n  RedirectType: null,\n  getRedirectError: null,\n  getRedirectStatusCodeFromError: null,\n  getRedirectTypeFromError: null,\n  getURLFromRedirectError: null,\n  isRedirectError: null,\n  permanentRedirect: null,\n  redirect: null\n});\nfunction _export(target, all) {\n  for (var name in all) Object.defineProperty(target, name, {\n    enumerable: true,\n    get: all[name]\n  });\n}\n_export(exports, {\n  RedirectType: function () {\n    return RedirectType;\n  },\n  getRedirectError: function () {\n    return getRedirectError;\n  },\n  getRedirectStatusCodeFromError: function () {\n    return getRedirectStatusCodeFromError;\n  },\n  getRedirectTypeFromError: function () {\n    return getRedirectTypeFromError;\n  },\n  getURLFromRedirectError: function () {\n    return getURLFromRedirectError;\n  },\n  isRedirectError: function () {\n    return isRedirectError;\n  },\n  permanentRedirect: function () {\n    return permanentRedirect;\n  },\n  redirect: function () {\n    return redirect;\n  }\n});\nconst _actionasyncstorageexternal = require(\"../../server/app-render/action-async-storage.external\");\nconst _redirectstatuscode = require(\"./redirect-status-code\");\nconst REDIRECT_ERROR_CODE = 'NEXT_REDIRECT';\nvar RedirectType;\n(function (RedirectType) {\n  RedirectType[\"push\"] = \"push\";\n  RedirectType[\"replace\"] = \"replace\";\n})(RedirectType || (RedirectType = {}));\nfunction getRedirectError(url, type, statusCode) {\n  if (statusCode === void 0) statusCode = _redirectstatuscode.RedirectStatusCode.TemporaryRedirect;\n  const error = new Error(REDIRECT_ERROR_CODE);\n  error.digest = REDIRECT_ERROR_CODE + \";\" + type + \";\" + url + \";\" + statusCode + \";\";\n  return error;\n}\nfunction redirect(/** The URL to redirect to */url, type) {\n  const actionStore = _actionasyncstorageexternal.actionAsyncStorage.getStore();\n  const redirectType = type || ((actionStore == null ? void 0 : actionStore.isAction) ? \"push\" : \"replace\");\n  throw getRedirectError(url, redirectType, _redirectstatuscode.RedirectStatusCode.TemporaryRedirect);\n}\nfunction permanentRedirect(/** The URL to redirect to */url, type) {\n  if (type === void 0) type = \"replace\";\n  throw getRedirectError(url, type, _redirectstatuscode.RedirectStatusCode.PermanentRedirect);\n}\nfunction isRedirectError(error) {\n  if (typeof error !== 'object' || error === null || !('digest' in error) || typeof error.digest !== 'string') {\n    return false;\n  }\n  const digest = error.digest.split(';');\n  const [errorCode, type] = digest;\n  const destination = digest.slice(2, -2).join(';');\n  const status = digest.at(-2);\n  const statusCode = Number(status);\n  return errorCode === REDIRECT_ERROR_CODE && (type === 'replace' || type === 'push') && typeof destination === 'string' && !isNaN(statusCode) && statusCode in _redirectstatuscode.RedirectStatusCode;\n}\nfunction getURLFromRedirectError(error) {\n  if (!isRedirectError(error)) return null;\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';');\n}\nfunction getRedirectTypeFromError(error) {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error');\n  }\n  return error.digest.split(';', 2)[1];\n}\nfunction getRedirectStatusCodeFromError(error) {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error');\n  }\n  return Number(error.digest.split(';').at(-2));\n}\nif ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {\n  Object.defineProperty(exports.default, '__esModule', {\n    value: true\n  });\n  Object.assign(exports.default, exports);\n  module.exports = exports.default;\n}","map":{"version":3,"names":["getRedirectError","getRedirectStatusCodeFromError","getRedirectTypeFromError","getURLFromRedirectError","isRedirectError","permanentRedirect","redirect","REDIRECT_ERROR_CODE","RedirectType","url","type","statusCode","_redirectstatuscode","RedirectStatusCode","TemporaryRedirect","error","Error","digest","actionStore","_actionasyncstorageexternal","actionAsyncStorage","getStore","redirectType","isAction","PermanentRedirect","split","errorCode","destination","slice","join","status","at","Number","isNaN"],"sources":["C:\\Users\\100li\\node_modules\\next\\src\\client\\components\\redirect.ts"],"sourcesContent":["import { actionAsyncStorage } from '../../server/app-render/action-async-storage.external'\nimport { RedirectStatusCode } from './redirect-status-code'\n\nconst REDIRECT_ERROR_CODE = 'NEXT_REDIRECT'\n\nexport enum RedirectType {\n  push = 'push',\n  replace = 'replace',\n}\n\nexport type RedirectError = Error & {\n  digest: `${typeof REDIRECT_ERROR_CODE};${RedirectType};${string};${RedirectStatusCode};`\n}\n\nexport function getRedirectError(\n  url: string,\n  type: RedirectType,\n  statusCode: RedirectStatusCode = RedirectStatusCode.TemporaryRedirect\n): RedirectError {\n  const error = new Error(REDIRECT_ERROR_CODE) as RedirectError\n  error.digest = `${REDIRECT_ERROR_CODE};${type};${url};${statusCode};`\n  return error\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 307/303 to the caller.\n * - In a Server Action, type defaults to 'push' and 'replace' elsewhere.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function redirect(\n  /** The URL to redirect to */\n  url: string,\n  type?: RedirectType\n): never {\n  const actionStore = actionAsyncStorage.getStore()\n  const redirectType =\n    type || (actionStore?.isAction ? RedirectType.push : RedirectType.replace)\n  throw getRedirectError(\n    url,\n    redirectType,\n    RedirectStatusCode.TemporaryRedirect\n  )\n}\n\n/**\n * This function allows you to redirect the user to another URL. It can be used in\n * [Server Components](https://nextjs.org/docs/app/building-your-application/rendering/server-components),\n * [Route Handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers), and\n * [Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions-and-mutations).\n *\n * - In a Server Component, this will insert a meta tag to redirect the user to the target page.\n * - In a Route Handler or Server Action, it will serve a 308/303 to the caller.\n *\n * Read more: [Next.js Docs: `redirect`](https://nextjs.org/docs/app/api-reference/functions/redirect)\n */\nexport function permanentRedirect(\n  /** The URL to redirect to */\n  url: string,\n  type: RedirectType = RedirectType.replace\n): never {\n  throw getRedirectError(url, type, RedirectStatusCode.PermanentRedirect)\n}\n\n/**\n * Checks an error to determine if it's an error generated by the\n * `redirect(url)` helper.\n *\n * @param error the error that may reference a redirect error\n * @returns true if the error is a redirect error\n */\nexport function isRedirectError(error: unknown): error is RedirectError {\n  if (\n    typeof error !== 'object' ||\n    error === null ||\n    !('digest' in error) ||\n    typeof error.digest !== 'string'\n  ) {\n    return false\n  }\n\n  const digest = error.digest.split(';')\n  const [errorCode, type] = digest\n  const destination = digest.slice(2, -2).join(';')\n  const status = digest.at(-2)\n\n  const statusCode = Number(status)\n\n  return (\n    errorCode === REDIRECT_ERROR_CODE &&\n    (type === 'replace' || type === 'push') &&\n    typeof destination === 'string' &&\n    !isNaN(statusCode) &&\n    statusCode in RedirectStatusCode\n  )\n}\n\n/**\n * Returns the encoded URL from the error if it's a RedirectError, null\n * otherwise. Note that this does not validate the URL returned.\n *\n * @param error the error that may be a redirect error\n * @return the url if the error was a redirect error\n */\nexport function getURLFromRedirectError(error: RedirectError): string\nexport function getURLFromRedirectError(error: unknown): string | null {\n  if (!isRedirectError(error)) return null\n\n  // Slices off the beginning of the digest that contains the code and the\n  // separating ';'.\n  return error.digest.split(';').slice(2, -2).join(';')\n}\n\nexport function getRedirectTypeFromError(error: RedirectError): RedirectType {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return error.digest.split(';', 2)[1] as RedirectType\n}\n\nexport function getRedirectStatusCodeFromError(error: RedirectError): number {\n  if (!isRedirectError(error)) {\n    throw new Error('Not a redirect error')\n  }\n\n  return Number(error.digest.split(';').at(-2))\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}